{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from bs4 import BeautifulSoup\n",
    "import pandas as pd \n",
    "import requests \n",
    "import time"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Mission Objective \n",
    "> * establish a connection with the target url\n",
    "> * extract the content of the target url (extract the html of that page we made a request to)\n",
    "> * parse that html content using the BeautifulSoup class that we imported"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "def scrape_yahoo(url: str):\n",
    "    resp = requests.get(url)\n",
    "    bsoup_object = BeautifulSoup(resp.text, \"lxml\")\n",
    "    \n",
    "    pre_frame = {\n",
    "        \"ticker\": [][:30], # make sure to shrink the column to having exactly 30 pieces of data so that no size/shape error occurs\n",
    "        \"name\": [][:30],\n",
    "        \"last_price\": [][:30],\n",
    "        \"market_time\": [][:30],\n",
    "        \"change\": [][:30],\n",
    "        \"change_percent\": [][:30],\n",
    "        \"volume\": [][:30],\n",
    "        \"market_cap\": [][:30]\n",
    "    }\n",
    "    \n",
    "    for row in bsoup_object.select('tr'):\n",
    "        try:\n",
    "            pre_frame[\"ticker\"].append(row.select('td')[0].text)\n",
    "            pre_frame[\"name\"].append(row.select('td')[1].text)\n",
    "            pre_frame[\"last_price\"].append(row.select('td')[2].text)\n",
    "            pre_frame[\"market_time\"].append(row.select('td')[3].text)\n",
    "            pre_frame[\"change\"].append(row.select('td')[4].text)\n",
    "            pre_frame[\"change_percent\"].append(row.select('td')[5].text)\n",
    "            pre_frame[\"volume\"].append(row.select('td')[6].text)\n",
    "            pre_frame[\"market_cap\"].append(row.select('td')[7].text)\n",
    "            \n",
    "        except:\n",
    "            continue \n",
    "            \n",
    "    df = pd.DataFrame(pre_frame) # index=False we don't want an additional useless column made which has index numbers\n",
    "    df.to_csv(\"finance.csv\", index=False)\n",
    "    \n",
    "    return f\"Exported {len(df)} rows of data\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# if __name__ == \"__main__\":\n",
    "#     while True:\n",
    "#         scrape_yahoo(\"https://finance.yahoo.com/trending-tickers\")\n",
    "#         time.sleep(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Exported 30 rows of data'"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scrape_yahoo(\"https://finance.yahoo.com/trending-tickers\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Cleansing "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ticker</th>\n",
       "      <th>name</th>\n",
       "      <th>last_price</th>\n",
       "      <th>market_time</th>\n",
       "      <th>change</th>\n",
       "      <th>change_percent</th>\n",
       "      <th>volume</th>\n",
       "      <th>market_cap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>GME</td>\n",
       "      <td>GameStop Corp.</td>\n",
       "      <td>214.77</td>\n",
       "      <td>10:49AM EDT</td>\n",
       "      <td>+14.40</td>\n",
       "      <td>+7.19%</td>\n",
       "      <td>3.975M</td>\n",
       "      <td>14.901B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>PLUG</td>\n",
       "      <td>Plug Power Inc.</td>\n",
       "      <td>31.88</td>\n",
       "      <td>10:49AM EDT</td>\n",
       "      <td>+2.03</td>\n",
       "      <td>+6.80%</td>\n",
       "      <td>26.167M</td>\n",
       "      <td>18.118B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>OCGN</td>\n",
       "      <td>Ocugen, Inc.</td>\n",
       "      <td>6.99</td>\n",
       "      <td>10:49AM EDT</td>\n",
       "      <td>-0.41</td>\n",
       "      <td>-5.54%</td>\n",
       "      <td>15.175M</td>\n",
       "      <td>1.386B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>SPLK</td>\n",
       "      <td>Splunk Inc.</td>\n",
       "      <td>140.47</td>\n",
       "      <td>10:49AM EDT</td>\n",
       "      <td>+14.98</td>\n",
       "      <td>+11.94%</td>\n",
       "      <td>4.522M</td>\n",
       "      <td>23.025B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>BTC-USD</td>\n",
       "      <td>Bitcoin USD</td>\n",
       "      <td>29,982.40</td>\n",
       "      <td>3:44PM BST</td>\n",
       "      <td>-3,037.60</td>\n",
       "      <td>-9.20%</td>\n",
       "      <td>51.247B</td>\n",
       "      <td>561.888B</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    ticker             name last_price  market_time     change change_percent  \\\n",
       "0      GME   GameStop Corp.     214.77  10:49AM EDT     +14.40         +7.19%   \n",
       "1     PLUG  Plug Power Inc.      31.88  10:49AM EDT      +2.03         +6.80%   \n",
       "2     OCGN     Ocugen, Inc.       6.99  10:49AM EDT      -0.41         -5.54%   \n",
       "3     SPLK      Splunk Inc.     140.47  10:49AM EDT     +14.98        +11.94%   \n",
       "4  BTC-USD      Bitcoin USD  29,982.40   3:44PM BST  -3,037.60         -9.20%   \n",
       "\n",
       "    volume market_cap  \n",
       "0   3.975M    14.901B  \n",
       "1  26.167M    18.118B  \n",
       "2  15.175M     1.386B  \n",
       "3   4.522M    23.025B  \n",
       "4  51.247B   561.888B  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_frame = pd.read_csv(\"finance.csv\")\n",
    "data_frame.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_frame[\"change\"] = data_frame[\"change\"].str.replace(\"+\", \"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_frame[\"change\"] = data_frame[\"change\"].str.replace(\",\", \"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_frame[\"change\"] = data_frame[\"change\"].str.replace(\"-\", \"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 30 entries, 0 to 29\n",
      "Data columns (total 8 columns):\n",
      " #   Column          Non-Null Count  Dtype \n",
      "---  ------          --------------  ----- \n",
      " 0   ticker          30 non-null     object\n",
      " 1   name            30 non-null     object\n",
      " 2   last_price      30 non-null     object\n",
      " 3   market_time     30 non-null     object\n",
      " 4   change          30 non-null     object\n",
      " 5   change_percent  30 non-null     object\n",
      " 6   volume          30 non-null     object\n",
      " 7   market_cap      30 non-null     object\n",
      "dtypes: object(8)\n",
      "memory usage: 2.0+ KB\n"
     ]
    }
   ],
   "source": [
    "data_frame.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 30 entries, 0 to 29\n",
      "Data columns (total 8 columns):\n",
      " #   Column          Non-Null Count  Dtype  \n",
      "---  ------          --------------  -----  \n",
      " 0   ticker          30 non-null     object \n",
      " 1   name            30 non-null     object \n",
      " 2   last_price      30 non-null     float64\n",
      " 3   market_time     30 non-null     object \n",
      " 4   change          30 non-null     float64\n",
      " 5   change_percent  30 non-null     object \n",
      " 6   volume          30 non-null     object \n",
      " 7   market_cap      30 non-null     object \n",
      "dtypes: float64(2), object(6)\n",
      "memory usage: 2.0+ KB\n"
     ]
    }
   ],
   "source": [
    "data_frame[\"change\"] = data_frame[\"change\"].astype(float)\n",
    "data_frame[\"last_price\"] = data_frame[\"last_price\"].str.replace(\",\", \"\").astype(float)\n",
    "data_frame.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_frame.drop(\"change_percent\", axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ticker</th>\n",
       "      <th>name</th>\n",
       "      <th>last_price</th>\n",
       "      <th>market_time</th>\n",
       "      <th>change</th>\n",
       "      <th>volume</th>\n",
       "      <th>market_cap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>GME</td>\n",
       "      <td>GameStop Corp.</td>\n",
       "      <td>214.77</td>\n",
       "      <td>10:49AM EDT</td>\n",
       "      <td>14.40</td>\n",
       "      <td>3.975M</td>\n",
       "      <td>14.901B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>PLUG</td>\n",
       "      <td>Plug Power Inc.</td>\n",
       "      <td>31.88</td>\n",
       "      <td>10:49AM EDT</td>\n",
       "      <td>2.03</td>\n",
       "      <td>26.167M</td>\n",
       "      <td>18.118B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>OCGN</td>\n",
       "      <td>Ocugen, Inc.</td>\n",
       "      <td>6.99</td>\n",
       "      <td>10:49AM EDT</td>\n",
       "      <td>0.41</td>\n",
       "      <td>15.175M</td>\n",
       "      <td>1.386B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>SPLK</td>\n",
       "      <td>Splunk Inc.</td>\n",
       "      <td>140.47</td>\n",
       "      <td>10:49AM EDT</td>\n",
       "      <td>14.98</td>\n",
       "      <td>4.522M</td>\n",
       "      <td>23.025B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>BTC-USD</td>\n",
       "      <td>Bitcoin USD</td>\n",
       "      <td>29982.40</td>\n",
       "      <td>3:44PM BST</td>\n",
       "      <td>3037.60</td>\n",
       "      <td>51.247B</td>\n",
       "      <td>561.888B</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    ticker             name  last_price  market_time   change   volume  \\\n",
       "0      GME   GameStop Corp.      214.77  10:49AM EDT    14.40   3.975M   \n",
       "1     PLUG  Plug Power Inc.       31.88  10:49AM EDT     2.03  26.167M   \n",
       "2     OCGN     Ocugen, Inc.        6.99  10:49AM EDT     0.41  15.175M   \n",
       "3     SPLK      Splunk Inc.      140.47  10:49AM EDT    14.98   4.522M   \n",
       "4  BTC-USD      Bitcoin USD    29982.40   3:44PM BST  3037.60  51.247B   \n",
       "\n",
       "  market_cap  \n",
       "0    14.901B  \n",
       "1    18.118B  \n",
       "2     1.386B  \n",
       "3    23.025B  \n",
       "4   561.888B  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_frame.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_frame[\"volume\"] = data_frame[\"volume\"].str.replace(\"M\", \"\")\n",
    "data_frame[\"volume\"] = data_frame[\"volume\"].str.replace(\"B\", \"\")\n",
    "data_frame[\"volume\"] = data_frame[\"volume\"].str.replace(\",\", \"\").astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ticker</th>\n",
       "      <th>name</th>\n",
       "      <th>last_price</th>\n",
       "      <th>market_time</th>\n",
       "      <th>change</th>\n",
       "      <th>volume</th>\n",
       "      <th>market_cap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>GME</td>\n",
       "      <td>GameStop Corp.</td>\n",
       "      <td>214.77</td>\n",
       "      <td>10:49AM EDT</td>\n",
       "      <td>14.40</td>\n",
       "      <td>3.975</td>\n",
       "      <td>14.901B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>PLUG</td>\n",
       "      <td>Plug Power Inc.</td>\n",
       "      <td>31.88</td>\n",
       "      <td>10:49AM EDT</td>\n",
       "      <td>2.03</td>\n",
       "      <td>26.167</td>\n",
       "      <td>18.118B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>OCGN</td>\n",
       "      <td>Ocugen, Inc.</td>\n",
       "      <td>6.99</td>\n",
       "      <td>10:49AM EDT</td>\n",
       "      <td>0.41</td>\n",
       "      <td>15.175</td>\n",
       "      <td>1.386B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>SPLK</td>\n",
       "      <td>Splunk Inc.</td>\n",
       "      <td>140.47</td>\n",
       "      <td>10:49AM EDT</td>\n",
       "      <td>14.98</td>\n",
       "      <td>4.522</td>\n",
       "      <td>23.025B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>BTC-USD</td>\n",
       "      <td>Bitcoin USD</td>\n",
       "      <td>29982.40</td>\n",
       "      <td>3:44PM BST</td>\n",
       "      <td>3037.60</td>\n",
       "      <td>51.247</td>\n",
       "      <td>561.888B</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    ticker             name  last_price  market_time   change  volume  \\\n",
       "0      GME   GameStop Corp.      214.77  10:49AM EDT    14.40   3.975   \n",
       "1     PLUG  Plug Power Inc.       31.88  10:49AM EDT     2.03  26.167   \n",
       "2     OCGN     Ocugen, Inc.        6.99  10:49AM EDT     0.41  15.175   \n",
       "3     SPLK      Splunk Inc.      140.47  10:49AM EDT    14.98   4.522   \n",
       "4  BTC-USD      Bitcoin USD    29982.40   3:44PM BST  3037.60  51.247   \n",
       "\n",
       "  market_cap  \n",
       "0    14.901B  \n",
       "1    18.118B  \n",
       "2     1.386B  \n",
       "3    23.025B  \n",
       "4   561.888B  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_frame.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_frame[\"market_cap\"] = data_frame[\"market_cap\"].str.replace(\"M\", \"\")\n",
    "data_frame[\"market_cap\"] = data_frame[\"market_cap\"].str.replace(\"B\", \"\")\n",
    "data_frame[\"market_cap\"] = data_frame[\"market_cap\"].str.replace(\",\", \"\").astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ticker</th>\n",
       "      <th>name</th>\n",
       "      <th>last_price</th>\n",
       "      <th>market_time</th>\n",
       "      <th>change</th>\n",
       "      <th>volume</th>\n",
       "      <th>market_cap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>GME</td>\n",
       "      <td>GameStop Corp.</td>\n",
       "      <td>214.77</td>\n",
       "      <td>10:49AM EDT</td>\n",
       "      <td>14.40</td>\n",
       "      <td>3.975</td>\n",
       "      <td>14.901</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>PLUG</td>\n",
       "      <td>Plug Power Inc.</td>\n",
       "      <td>31.88</td>\n",
       "      <td>10:49AM EDT</td>\n",
       "      <td>2.03</td>\n",
       "      <td>26.167</td>\n",
       "      <td>18.118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>OCGN</td>\n",
       "      <td>Ocugen, Inc.</td>\n",
       "      <td>6.99</td>\n",
       "      <td>10:49AM EDT</td>\n",
       "      <td>0.41</td>\n",
       "      <td>15.175</td>\n",
       "      <td>1.386</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>SPLK</td>\n",
       "      <td>Splunk Inc.</td>\n",
       "      <td>140.47</td>\n",
       "      <td>10:49AM EDT</td>\n",
       "      <td>14.98</td>\n",
       "      <td>4.522</td>\n",
       "      <td>23.025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>BTC-USD</td>\n",
       "      <td>Bitcoin USD</td>\n",
       "      <td>29982.40</td>\n",
       "      <td>3:44PM BST</td>\n",
       "      <td>3037.60</td>\n",
       "      <td>51.247</td>\n",
       "      <td>561.888</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    ticker             name  last_price  market_time   change  volume  \\\n",
       "0      GME   GameStop Corp.      214.77  10:49AM EDT    14.40   3.975   \n",
       "1     PLUG  Plug Power Inc.       31.88  10:49AM EDT     2.03  26.167   \n",
       "2     OCGN     Ocugen, Inc.        6.99  10:49AM EDT     0.41  15.175   \n",
       "3     SPLK      Splunk Inc.      140.47  10:49AM EDT    14.98   4.522   \n",
       "4  BTC-USD      Bitcoin USD    29982.40   3:44PM BST  3037.60  51.247   \n",
       "\n",
       "   market_cap  \n",
       "0      14.901  \n",
       "1      18.118  \n",
       "2       1.386  \n",
       "3      23.025  \n",
       "4     561.888  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_frame.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 30 entries, 0 to 29\n",
      "Data columns (total 7 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   ticker       30 non-null     object \n",
      " 1   name         30 non-null     object \n",
      " 2   last_price   30 non-null     float64\n",
      " 3   market_time  30 non-null     object \n",
      " 4   change       30 non-null     float64\n",
      " 5   volume       30 non-null     float64\n",
      " 6   market_cap   30 non-null     float64\n",
      "dtypes: float64(4), object(3)\n",
      "memory usage: 1.8+ KB\n"
     ]
    }
   ],
   "source": [
    "data_frame.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
